"""Initial database schema

Revision ID: 704dbb1ea8cf
Revises: 
Create Date: 2025-09-16 00:43:42.610678

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '704dbb1ea8cf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agent_performance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('agent_type', sa.String(length=50), nullable=False),
    sa.Column('agent_version', sa.String(length=20), nullable=True),
    sa.Column('measurement_period', sa.String(length=20), nullable=True),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('total_conversations', sa.Integer(), nullable=True),
    sa.Column('successful_conversations', sa.Integer(), nullable=True),
    sa.Column('failed_conversations', sa.Integer(), nullable=True),
    sa.Column('escalated_conversations', sa.Integer(), nullable=True),
    sa.Column('average_confidence_score', sa.DECIMAL(precision=4, scale=3), nullable=True),
    sa.Column('average_user_satisfaction', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('total_user_ratings', sa.Integer(), nullable=True),
    sa.Column('flagged_responses', sa.Integer(), nullable=True),
    sa.Column('average_response_time_ms', sa.Integer(), nullable=True),
    sa.Column('median_response_time_ms', sa.Integer(), nullable=True),
    sa.Column('max_response_time_ms', sa.Integer(), nullable=True),
    sa.Column('total_tokens_used', sa.Integer(), nullable=True),
    sa.Column('total_api_cost', sa.DECIMAL(precision=10, scale=6), nullable=True),
    sa.Column('average_cost_per_conversation', sa.DECIMAL(precision=8, scale=6), nullable=True),
    sa.Column('correct_urgency_classifications', sa.Integer(), nullable=True),
    sa.Column('total_urgency_classifications', sa.Integer(), nullable=True),
    sa.Column('urgency_accuracy_rate', sa.DECIMAL(precision=4, scale=3), nullable=True),
    sa.Column('correct_intent_detections', sa.Integer(), nullable=True),
    sa.Column('total_intent_detections', sa.Integer(), nullable=True),
    sa.Column('intent_accuracy_rate', sa.DECIMAL(precision=4, scale=3), nullable=True),
    sa.Column('domain_performance', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('language_performance', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('urgency_performance', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pattern_matches', sa.Integer(), nullable=True),
    sa.Column('new_patterns_learned', sa.Integer(), nullable=True),
    sa.Column('routing_improvements', sa.Integer(), nullable=True),
    sa.Column('reviewed_conversations', sa.Integer(), nullable=True),
    sa.Column('approved_conversations', sa.Integer(), nullable=True),
    sa.Column('rejected_conversations', sa.Integer(), nullable=True),
    sa.Column('hk_data_requests', sa.Integer(), nullable=True),
    sa.Column('successful_hk_data_integrations', sa.Integer(), nullable=True),
    sa.Column('failed_hk_data_integrations', sa.Integer(), nullable=True),
    sa.Column('cultural_context_applied', sa.Integer(), nullable=True),
    sa.Column('cultural_sensitivity_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('error_types', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("agent_type IN ('illness_monitor', 'mental_health', 'safety_guardian', 'wellness_coach')", name='ck_agent_performance_type'),
    sa.CheckConstraint("measurement_period IN ('hourly', 'daily', 'weekly', 'monthly')", name='ck_measurement_period'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_agent_performance_domain_gin', 'agent_performance', ['domain_performance'], unique=False, postgresql_using='gin')
    op.create_index('idx_agent_performance_type_period', 'agent_performance', ['agent_type', 'measurement_period', 'period_start'], unique=False)
    op.create_index(op.f('ix_agent_performance_agent_type'), 'agent_performance', ['agent_type'], unique=False)
    op.create_index(op.f('ix_agent_performance_id'), 'agent_performance', ['id'], unique=False)
    op.create_index(op.f('ix_agent_performance_measurement_period'), 'agent_performance', ['measurement_period'], unique=False)
    op.create_index(op.f('ix_agent_performance_period_end'), 'agent_performance', ['period_end'], unique=False)
    op.create_index(op.f('ix_agent_performance_period_start'), 'agent_performance', ['period_start'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('resource', sa.String(length=100), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_permissions_category'), 'permissions', ['category'], unique=False)
    op.create_index(op.f('ix_permissions_id'), 'permissions', ['id'], unique=False)
    op.create_index(op.f('ix_permissions_is_active'), 'permissions', ['is_active'], unique=False)
    op.create_index(op.f('ix_permissions_resource'), 'permissions', ['resource'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('is_super_admin', sa.Boolean(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('license_number', sa.String(length=100), nullable=True),
    sa.Column('organization', sa.String(length=255), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('account_locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=True),
    sa.Column('two_factor_secret', sa.String(length=255), nullable=True),
    sa.Column('language_preference', sa.String(length=10), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('notification_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("language_preference IN ('en', 'zh-HK', 'zh-CN')", name='ck_user_language'),
    sa.CheckConstraint("role IN ('user', 'admin', 'medical_reviewer', 'data_manager', 'super_admin')", name='ck_user_role'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_users_notification_prefs_gin', 'users', ['notification_preferences'], unique=False, postgresql_using='gin')
    op.create_index(op.f('ix_users_department'), 'users', ['department'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_last_login'), 'users', ['last_login'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_category', sa.String(length=50), nullable=False),
    sa.Column('event_description', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('target_type', sa.String(length=50), nullable=True),
    sa.Column('target_id', sa.String(length=100), nullable=True),
    sa.Column('target_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('result', sa.String(length=20), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('severity_level', sa.String(length=20), nullable=True),
    sa.Column('security_impact', sa.String(length=20), nullable=True),
    sa.Column('retention_period', sa.Integer(), nullable=True),
    sa.Column('compliance_tags', sa.ARRAY(sa.String(length=255)), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("result IN ('success', 'failure', 'error', 'partial')", name='ck_result'),
    sa.CheckConstraint("security_impact IN ('none', 'low', 'medium', 'high', 'critical')", name='ck_security_impact'),
    sa.CheckConstraint("severity_level IN ('debug', 'info', 'warning', 'error', 'critical')", name='ck_severity_level'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_logs_severity_category', 'audit_logs', ['severity_level', 'event_category'], unique=False)
    op.create_index('idx_audit_logs_user_event_time', 'audit_logs', ['user_id', 'event_type', 'created_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_created_at'), 'audit_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_event_category'), 'audit_logs', ['event_category'], unique=False)
    op.create_index(op.f('ix_audit_logs_event_type'), 'audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_ip_address'), 'audit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('ix_audit_logs_severity_level'), 'audit_logs', ['severity_level'], unique=False)
    op.create_index(op.f('ix_audit_logs_target_id'), 'audit_logs', ['target_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_target_type'), 'audit_logs', ['target_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('user_input', sa.Text(), nullable=False),
    sa.Column('agent_response', sa.Text(), nullable=False),
    sa.Column('agent_type', sa.String(length=50), nullable=False),
    sa.Column('agent_name', sa.String(length=100), nullable=True),
    sa.Column('agent_confidence', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('intent_detected', sa.String(length=100), nullable=True),
    sa.Column('urgency_level', sa.String(length=20), nullable=True),
    sa.Column('domain_classification', sa.String(length=50), nullable=True),
    sa.Column('sentiment_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('cultural_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_satisfaction', sa.Integer(), nullable=True),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('flagged_by_user', sa.Boolean(), nullable=True),
    sa.Column('flag_reason', sa.String(length=255), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('api_cost', sa.DECIMAL(precision=10, scale=6), nullable=True),
    sa.Column('hk_data_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('external_apis_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('conversation_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('routing_decision', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('handoff_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content_flagged', sa.Boolean(), nullable=True),
    sa.Column('content_flag_reason', sa.String(length=255), nullable=True),
    sa.Column('reviewed_by', sa.Integer(), nullable=True),
    sa.Column('review_status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("agent_type IN ('illness_monitor', 'mental_health', 'safety_guardian', 'wellness_coach')", name='ck_agent_type'),
    sa.CheckConstraint("language IN ('en', 'zh-HK', 'zh-CN')", name='ck_language'),
    sa.CheckConstraint("review_status IN ('pending', 'approved', 'rejected', 'needs_review')", name='ck_review_status'),
    sa.CheckConstraint("urgency_level IN ('low', 'medium', 'high', 'emergency')", name='ck_urgency_level'),
    sa.CheckConstraint('agent_confidence >= 0 AND agent_confidence <= 1', name='ck_agent_confidence'),
    sa.CheckConstraint('sentiment_score >= -1 AND sentiment_score <= 1', name='ck_sentiment_score'),
    sa.CheckConstraint('user_satisfaction >= 1 AND user_satisfaction <= 5', name='ck_user_satisfaction'),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_conversations_context_gin', 'conversations', ['conversation_context'], unique=False, postgresql_using='gin')
    op.create_index('idx_conversations_hk_data_gin', 'conversations', ['hk_data_used'], unique=False, postgresql_using='gin')
    op.create_index('idx_conversations_session_agent_time', 'conversations', ['session_id', 'agent_type', 'created_at'], unique=False)
    op.create_index('idx_conversations_user_urgency_time', 'conversations', ['user_id', 'urgency_level', 'created_at'], unique=False)
    op.create_index(op.f('ix_conversations_agent_type'), 'conversations', ['agent_type'], unique=False)
    op.create_index(op.f('ix_conversations_flagged_by_user'), 'conversations', ['flagged_by_user'], unique=False)
    op.create_index(op.f('ix_conversations_id'), 'conversations', ['id'], unique=False)
    op.create_index(op.f('ix_conversations_language'), 'conversations', ['language'], unique=False)
    op.create_index(op.f('ix_conversations_review_status'), 'conversations', ['review_status'], unique=False)
    op.create_index(op.f('ix_conversations_session_id'), 'conversations', ['session_id'], unique=False)
    op.create_index(op.f('ix_conversations_urgency_level'), 'conversations', ['urgency_level'], unique=False)
    op.create_index(op.f('ix_conversations_user_id'), 'conversations', ['user_id'], unique=False)
    op.create_index(op.f('ix_conversations_user_satisfaction'), 'conversations', ['user_satisfaction'], unique=False)
    op.create_table('hk_healthcare_facilities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('facility_id', sa.String(length=50), nullable=False),
    sa.Column('facility_code', sa.String(length=20), nullable=True),
    sa.Column('name_en', sa.String(length=255), nullable=False),
    sa.Column('name_zh_hant', sa.String(length=255), nullable=True),
    sa.Column('name_zh_hans', sa.String(length=255), nullable=True),
    sa.Column('facility_type', sa.String(length=50), nullable=False),
    sa.Column('facility_subtype', sa.String(length=100), nullable=True),
    sa.Column('cluster', sa.String(length=50), nullable=True),
    sa.Column('services_offered', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('specialties', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('emergency_services', sa.Boolean(), nullable=True),
    sa.Column('a_e_services', sa.Boolean(), nullable=True),
    sa.Column('address_en', sa.Text(), nullable=True),
    sa.Column('address_zh', sa.Text(), nullable=True),
    sa.Column('district', sa.String(length=50), nullable=True),
    sa.Column('region', sa.String(length=20), nullable=True),
    sa.Column('latitude', sa.DECIMAL(precision=10, scale=8), nullable=True),
    sa.Column('longitude', sa.DECIMAL(precision=11, scale=8), nullable=True),
    sa.Column('phone_main', sa.String(length=20), nullable=True),
    sa.Column('phone_appointment', sa.String(length=20), nullable=True),
    sa.Column('phone_emergency', sa.String(length=20), nullable=True),
    sa.Column('fax', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('website', sa.String(length=500), nullable=True),
    sa.Column('operating_hours', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('appointment_required', sa.Boolean(), nullable=True),
    sa.Column('walk_in_available', sa.Boolean(), nullable=True),
    sa.Column('online_booking_available', sa.Boolean(), nullable=True),
    sa.Column('total_beds', sa.Integer(), nullable=True),
    sa.Column('available_beds', sa.Integer(), nullable=True),
    sa.Column('icu_beds', sa.Integer(), nullable=True),
    sa.Column('emergency_capacity', sa.Integer(), nullable=True),
    sa.Column('current_waiting_time', sa.Integer(), nullable=True),
    sa.Column('queue_status', sa.String(length=20), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('government_rating', sa.Integer(), nullable=True),
    sa.Column('patient_satisfaction_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('data_source', sa.String(length=100), nullable=False),
    sa.Column('data_source_url', sa.String(length=500), nullable=True),
    sa.Column('data_quality_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('verified_by_admin', sa.Boolean(), nullable=True),
    sa.Column('verification_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=True),
    sa.Column('status_notes', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("facility_type IN ('hospital', 'clinic', 'health_center', 'emergency', 'specialist', 'dental', 'mental_health')", name='ck_facility_type'),
    sa.CheckConstraint("queue_status IN ('normal', 'busy', 'full', 'closed')", name='ck_queue_status'),
    sa.CheckConstraint("region IN ('Hong Kong Island', 'Kowloon', 'New Territories')", name='ck_region'),
    sa.CheckConstraint('government_rating >= 1 AND government_rating <= 5', name='ck_government_rating'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_hk_facilities_emergency_region', 'hk_healthcare_facilities', ['emergency_services', 'region'], unique=False)
    op.create_index('idx_hk_facilities_hours_gin', 'hk_healthcare_facilities', ['operating_hours'], unique=False, postgresql_using='gin')
    op.create_index('idx_hk_facilities_services_gin', 'hk_healthcare_facilities', ['services_offered'], unique=False, postgresql_using='gin')
    op.create_index('idx_hk_facilities_type_district_active', 'hk_healthcare_facilities', ['facility_type', 'district', 'is_active'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_district'), 'hk_healthcare_facilities', ['district'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_emergency_services'), 'hk_healthcare_facilities', ['emergency_services'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_facility_id'), 'hk_healthcare_facilities', ['facility_id'], unique=True)
    op.create_index(op.f('ix_hk_healthcare_facilities_facility_type'), 'hk_healthcare_facilities', ['facility_type'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_id'), 'hk_healthcare_facilities', ['id'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_is_active'), 'hk_healthcare_facilities', ['is_active'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_last_updated'), 'hk_healthcare_facilities', ['last_updated'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_facilities_region'), 'hk_healthcare_facilities', ['region'], unique=False)
    op.create_table('uploaded_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('stored_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_type', sa.String(length=50), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('document_type', sa.String(length=50), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('extracted_text', sa.Text(), nullable=True),
    sa.Column('extraction_method', sa.String(length=50), nullable=True),
    sa.Column('extraction_confidence', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('processing_status', sa.String(length=20), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('content_quality_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('medical_accuracy_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('cultural_relevance_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('overall_quality_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('review_status', sa.String(length=20), nullable=True),
    sa.Column('reviewed_by', sa.Integer(), nullable=True),
    sa.Column('review_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('approval_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approval_notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_searchable', sa.Boolean(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('last_used', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('document_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=True),
    sa.Column('superseded_by', sa.Integer(), nullable=True),
    sa.Column('access_level', sa.String(length=20), nullable=True),
    sa.Column('encryption_status', sa.String(length=20), nullable=True),
    sa.Column('retention_period', sa.Integer(), nullable=True),
    sa.Column('compliance_flags', sa.ARRAY(sa.String(length=100)), nullable=True),
    sa.Column('uploaded_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("access_level IN ('public', 'internal', 'restricted', 'confidential')", name='ck_access_level'),
    sa.CheckConstraint("document_type IN ('medical_guideline', 'treatment_protocol', 'medication_info', 'emergency_procedure', 'hk_health_policy', 'research_paper', 'training_material')", name='ck_document_type'),
    sa.CheckConstraint("encryption_status IN ('none', 'at_rest', 'full')", name='ck_encryption_status'),
    sa.CheckConstraint("processing_status IN ('uploaded', 'processing', 'processed', 'failed', 'approved', 'rejected')", name='ck_processing_status'),
    sa.CheckConstraint("review_status IN ('pending', 'under_review', 'approved', 'rejected', 'needs_revision')", name='ck_review_status'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['superseded_by'], ['uploaded_documents.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_documents_metadata_gin', 'uploaded_documents', ['document_metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_documents_tags_gin', 'uploaded_documents', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_documents_type_status_active', 'uploaded_documents', ['document_type', 'processing_status', 'is_active'], unique=False)
    op.create_index(op.f('ix_uploaded_documents_document_type'), 'uploaded_documents', ['document_type'], unique=False)
    op.create_index(op.f('ix_uploaded_documents_file_hash'), 'uploaded_documents', ['file_hash'], unique=True)
    op.create_index(op.f('ix_uploaded_documents_id'), 'uploaded_documents', ['id'], unique=False)
    op.create_index(op.f('ix_uploaded_documents_is_active'), 'uploaded_documents', ['is_active'], unique=False)
    op.create_index(op.f('ix_uploaded_documents_processing_status'), 'uploaded_documents', ['processing_status'], unique=False)
    op.create_index(op.f('ix_uploaded_documents_review_status'), 'uploaded_documents', ['review_status'], unique=False)
    op.create_index(op.f('ix_uploaded_documents_uploaded_by'), 'uploaded_documents', ['uploaded_by'], unique=False)
    op.create_table('user_permissions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revoked_by', sa.Integer(), nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['revoked_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_table('user_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('refresh_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revoked_reason', sa.String(length=100), nullable=True),
    sa.Column('location_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_activity', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('refresh_token')
    )
    op.create_index(op.f('ix_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_ip_address'), 'user_sessions', ['ip_address'], unique=False)
    op.create_index(op.f('ix_user_sessions_is_active'), 'user_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_table('agent_routing_decisions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('conversation_id', sa.Integer(), nullable=False),
    sa.Column('selected_agent', sa.String(length=50), nullable=False),
    sa.Column('routing_confidence', sa.DECIMAL(precision=4, scale=3), nullable=True),
    sa.Column('routing_time_ms', sa.Integer(), nullable=True),
    sa.Column('agent_scores', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('intent_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('urgency_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('domain_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('language_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('context_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('alternative_agents', sa.ARRAY(sa.String(length=50)), nullable=True),
    sa.Column('runner_up_agent', sa.String(length=50), nullable=True),
    sa.Column('runner_up_score', sa.DECIMAL(precision=4, scale=3), nullable=True),
    sa.Column('was_optimal', sa.Boolean(), nullable=True),
    sa.Column('user_switched_agent', sa.Boolean(), nullable=True),
    sa.Column('switched_to_agent', sa.String(length=50), nullable=True),
    sa.Column('switch_reason', sa.String(length=255), nullable=True),
    sa.Column('feedback_incorporated', sa.Boolean(), nullable=True),
    sa.Column('improved_routing', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_routing_decisions_id'), 'agent_routing_decisions', ['id'], unique=False)
    op.create_table('document_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_description', sa.Text(), nullable=True),
    sa.Column('stored_filename', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=False),
    sa.Column('content_changes', sa.Text(), nullable=True),
    sa.Column('change_summary', sa.Text(), nullable=True),
    sa.Column('is_current', sa.Boolean(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['uploaded_documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_versions_id'), 'document_versions', ['id'], unique=False)
    op.create_index('uq_document_version', 'document_versions', ['document_id', 'version_number'], unique=True)
    op.create_table('hk_healthcare_updates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('facility_id', sa.Integer(), nullable=False),
    sa.Column('update_type', sa.String(length=50), nullable=False),
    sa.Column('field_name', sa.String(length=100), nullable=False),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('value_type', sa.String(length=20), nullable=True),
    sa.Column('data_source', sa.String(length=100), nullable=False),
    sa.Column('source_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('confidence_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=True),
    sa.Column('validation_method', sa.String(length=100), nullable=True),
    sa.Column('validation_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("value_type IN ('string', 'integer', 'decimal', 'boolean', 'json')", name='ck_value_type'),
    sa.ForeignKeyConstraint(['facility_id'], ['hk_healthcare_facilities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_hk_healthcare_updates_facility_id'), 'hk_healthcare_updates', ['facility_id'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_updates_id'), 'hk_healthcare_updates', ['id'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_updates_processed'), 'hk_healthcare_updates', ['processed'], unique=False)
    op.create_index(op.f('ix_hk_healthcare_updates_update_type'), 'hk_healthcare_updates', ['update_type'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade database schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_hk_healthcare_updates_update_type'), table_name='hk_healthcare_updates')
    op.drop_index(op.f('ix_hk_healthcare_updates_processed'), table_name='hk_healthcare_updates')
    op.drop_index(op.f('ix_hk_healthcare_updates_id'), table_name='hk_healthcare_updates')
    op.drop_index(op.f('ix_hk_healthcare_updates_facility_id'), table_name='hk_healthcare_updates')
    op.drop_table('hk_healthcare_updates')
    op.drop_index('uq_document_version', table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_id'), table_name='document_versions')
    op.drop_table('document_versions')
    op.drop_index(op.f('ix_agent_routing_decisions_id'), table_name='agent_routing_decisions')
    op.drop_table('agent_routing_decisions')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_is_active'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_ip_address'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_table('user_permissions')
    op.drop_index(op.f('ix_uploaded_documents_uploaded_by'), table_name='uploaded_documents')
    op.drop_index(op.f('ix_uploaded_documents_review_status'), table_name='uploaded_documents')
    op.drop_index(op.f('ix_uploaded_documents_processing_status'), table_name='uploaded_documents')
    op.drop_index(op.f('ix_uploaded_documents_is_active'), table_name='uploaded_documents')
    op.drop_index(op.f('ix_uploaded_documents_id'), table_name='uploaded_documents')
    op.drop_index(op.f('ix_uploaded_documents_file_hash'), table_name='uploaded_documents')
    op.drop_index(op.f('ix_uploaded_documents_document_type'), table_name='uploaded_documents')
    op.drop_index('idx_documents_type_status_active', table_name='uploaded_documents')
    op.drop_index('idx_documents_tags_gin', table_name='uploaded_documents', postgresql_using='gin')
    op.drop_index('idx_documents_metadata_gin', table_name='uploaded_documents', postgresql_using='gin')
    op.drop_table('uploaded_documents')
    op.drop_index(op.f('ix_hk_healthcare_facilities_region'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_last_updated'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_is_active'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_id'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_facility_type'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_facility_id'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_emergency_services'), table_name='hk_healthcare_facilities')
    op.drop_index(op.f('ix_hk_healthcare_facilities_district'), table_name='hk_healthcare_facilities')
    op.drop_index('idx_hk_facilities_type_district_active', table_name='hk_healthcare_facilities')
    op.drop_index('idx_hk_facilities_services_gin', table_name='hk_healthcare_facilities', postgresql_using='gin')
    op.drop_index('idx_hk_facilities_hours_gin', table_name='hk_healthcare_facilities', postgresql_using='gin')
    op.drop_index('idx_hk_facilities_emergency_region', table_name='hk_healthcare_facilities')
    op.drop_table('hk_healthcare_facilities')
    op.drop_index(op.f('ix_conversations_user_satisfaction'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_user_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_urgency_level'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_session_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_review_status'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_language'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_flagged_by_user'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_agent_type'), table_name='conversations')
    op.drop_index('idx_conversations_user_urgency_time', table_name='conversations')
    op.drop_index('idx_conversations_session_agent_time', table_name='conversations')
    op.drop_index('idx_conversations_hk_data_gin', table_name='conversations', postgresql_using='gin')
    op.drop_index('idx_conversations_context_gin', table_name='conversations', postgresql_using='gin')
    op.drop_table('conversations')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_target_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_target_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_severity_level'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_ip_address'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_event_category'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_created_at'), table_name='audit_logs')
    op.drop_index('idx_audit_logs_user_event_time', table_name='audit_logs')
    op.drop_index('idx_audit_logs_severity_category', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_last_login'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_department'), table_name='users')
    op.drop_index('idx_users_notification_prefs_gin', table_name='users', postgresql_using='gin')
    op.drop_table('users')
    op.drop_index(op.f('ix_permissions_resource'), table_name='permissions')
    op.drop_index(op.f('ix_permissions_is_active'), table_name='permissions')
    op.drop_index(op.f('ix_permissions_id'), table_name='permissions')
    op.drop_index(op.f('ix_permissions_category'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_index(op.f('ix_agent_performance_period_start'), table_name='agent_performance')
    op.drop_index(op.f('ix_agent_performance_period_end'), table_name='agent_performance')
    op.drop_index(op.f('ix_agent_performance_measurement_period'), table_name='agent_performance')
    op.drop_index(op.f('ix_agent_performance_id'), table_name='agent_performance')
    op.drop_index(op.f('ix_agent_performance_agent_type'), table_name='agent_performance')
    op.drop_index('idx_agent_performance_type_period', table_name='agent_performance')
    op.drop_index('idx_agent_performance_domain_gin', table_name='agent_performance', postgresql_using='gin')
    op.drop_table('agent_performance')
    # ### end Alembic commands ###
