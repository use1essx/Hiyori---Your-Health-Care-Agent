[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "healthcare-ai-v2"
version = "2.0.0"
description = "Healthcare AI System for Hong Kong with Multi-Agent Architecture"
authors = [
    {name = "Healthcare AI Team", email = "team@healthcare-ai.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["healthcare", "ai", "hong-kong", "multi-agent", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    # FastAPI and ASGI
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    
    # Database
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",
    
    # Redis and Caching
    "redis>=5.0.1",
    "hiredis>=2.2.3",
    
    # Data Validation and Settings
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "email-validator>=2.1.0",
    
    # Authentication and Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "cryptography>=41.0.7",
    
    # HTTP Client
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    "aiofiles>=23.2.1",
    
    # Template Engine
    "jinja2>=3.1.2",
    
    # Data Processing
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    "scikit-learn>=1.3.2",
    
    # AI and NLP
    "openai>=1.3.7",
    "langchain>=0.0.350",
    "langchain-openai>=0.0.2",
    "tiktoken>=0.5.2",
    
    # File Processing
    "PyPDF2>=3.0.1",
    "Pillow>=10.1.0",
    "pytesseract>=0.3.10",
    "python-magic>=0.4.27",
    
    # Web Scraping
    "beautifulsoup4>=4.12.2",
    "lxml>=4.9.3",
    
    # Date and Time
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    
    # Utilities
    "click>=8.1.7",
    "rich>=13.7.0",
    "typer>=0.9.0",
    
    # Monitoring and Logging
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    "httpx>=0.25.2",
    
    # Code Quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.4",
    
    # Development Tools
    "pre-commit>=3.6.0",
    "ipython>=8.17.2",
    "jupyter>=1.0.0",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]

production = [
    # Production ASGI Server
    "gunicorn>=21.2.0",
    
    # Monitoring
    "sentry-sdk[fastapi]>=1.38.0",
    "prometheus-client>=0.19.0",
    
    # Performance
    "orjson>=3.9.10",
    "ujson>=5.8.0",
]

[project.urls]
Homepage = "https://github.com/healthcare-ai/healthcare-ai-v2"
Documentation = "https://healthcare-ai-v2.readthedocs.io"
Repository = "https://github.com/healthcare-ai/healthcare-ai-v2.git"
Issues = "https://github.com/healthcare-ai/healthcare-ai-v2/issues"

[project.scripts]
healthcare-ai = "src.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json", "*.sql"]

# Black formatting
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pytesseract.*",
    "magic.*",
    "PIL.*",
    "PyPDF2.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["src/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "src/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["src/tests", "migrations"]
skips = ["B101", "B601"]
